name: multi-arch build

on:
  push:
    branches:
      - master
      - develop

jobs:
  build:
    permissions:
      id-token: write
      contents: read
    name: ${{ matrix.type }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - { os: ubuntu-22.04, type: "linux_amd64_gnu_ssl1", compiler: "gnu", ssl: "ssl1", debianArch: "amd64", tripleArch: "x86_64", tripleGnu: "gnu", debianVersion: "buster-backports", native: "true" }
          - { os: ubuntu-22.04, type: "linux_amd64_gnu_ssl3", compiler: "gnu", ssl: "ssl3", debianArch: "amd64", tripleArch: "x86_64", tripleGnu: "gnu", debianVersion: "bookworm-backports", native: "true" }
          - { os: ubuntu-22.04, type: "linux_amd64_clang_ssl3", compiler: "clang", ssl: "ssl3", debianArch: "amd64", tripleArch: "x86_64", tripleGnu: "gnu", debianVersion: "bookworm-backports", native: "true" }
          #- { os: ubuntu-22.04, type: "linux_i386_gnu_ssl1", compiler: "gnu", ssl: "ssl1", debianArch: "i386", tripleArch: "i386", tripleGnu: "gnu", debianVersion: "buster-backports", native: "false" }
          #- { os: ubuntu-22.04, type: "linux_i386_gnu_ssl3", compiler: "gnu", ssl: "ssl3", debianArch: "i386", tripleArch: "i386", tripleGnu: "gnu", debianVersion: "bookworm-backports", native: "false" }
          - { os: ubuntu-22.04, type: "linux_ppc64el_gnu_ssl3", compiler: "gnu", ssl: "ssl3", debianArch: "ppc64el", tripleArch: "powerpc64le", tripleGnu: "gnu", debianVersion: "bookworm-backports", native: "false" }
          - { os: ubuntu-22.04, type: "linux_riscv64_gnu_ssl3", compiler: "gnu", ssl: "ssl3", debianArch: "riscv64", tripleArch: "riscv64", tripleGnu: "gnu", debianVersion: "trixie", native: "false" }
          - { os: ubuntu-22.04, type: "linux_armhf_gnu_ssl1", compiler: "gnu", ssl: "ssl1", debianArch: "armhf", tripleArch: "arm", tripleGnu: "gnueabihf", debianVersion: "buster-backports", native: "false" }
          - { os: ubuntu-22.04, type: "linux_armhf_gnu_ssl3", compiler: "gnu", ssl: "ssl3", debianArch: "armhf", tripleArch: "arm", tripleGnu: "gnueabihf", debianVersion: "bookworm-backports", native: "false" }
          - { os: ubuntu-22.04, type: "linux_arm64_gnu_ssl1", compiler: "gnu", ssl: "ssl1", debianArch: "arm64", tripleArch: "aarch64", tripleGnu: "gnu", debianVersion: "buster-backports", native: "false" }
          - { os: ubuntu-22.04, type: "linux_arm64_gnu_ssl3", compiler: "gnu", ssl: "ssl3", debianArch: "arm64", tripleArch: "aarch64", tripleGnu: "gnu", debianVersion: "bookworm-backports", native: "false" }
          - { os: ubuntu-22.04, type: "linux_arm64_clang_ssl3", compiler: "clang", ssl: "ssl3", debianArch: "arm64", tripleArch: "aarch64", tripleGnu: "gnu", debianVersion: "bookworm-backports", native: "false" }
          - { os: windows-2022, type: "windows_amd64", vcpkgCommitId: "b1e15efef6758eaa0beb0a8732cfa66f6a68a81d", triplet: "x64-windows-static" }
          - { os: macos-13, type: "macos_amd64" }
          - { os: macos-15, type: "macos_arm64" }
    steps:
      - name: Configure Git to use HTTP/1.1
        shell: bash
        run: |
          git config --global http.version HTTP/1.1
          git config --global http.postBuffer 524288000
      - name: Checkout current repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 1
      - name: Shallow clone submodules
        shell: bash
        run: |
          for i in 1 2 3; do
            git submodule update --init --recursive --depth=1 && break
            echo "Submodule checkout failed. Retrying in 10 seconds..."
            sleep 10
          done
      # Workaround for https://github.com/lukka/run-vcpkg/issues/251.
      - name: Restore vcpkg Cache
        if: matrix.os == 'windows-2022'
        id: vcpkg-cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env._vcpkg_binary_cache }}
          key: vcpkg-${{ matrix.config.os }}-${{ matrix.config.type }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: vcpkg-${{ matrix.config.os }}-${{ matrix.config.type }}-
      - name: Get version
        shell: bash
        run: |
          set -xeo pipefail
          # Get latest commit short hash
          HASH_VERSION=$(git rev-parse --short HEAD)

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          HASH_VERSION=$(echo "$HASH_VERSION" | awk '{print tolower($0)}')
          VERSION=$(echo "$VERSION" | awk '{print tolower($0)}')
          TYPE=${{ matrix.type }}
          SAFE_TYPE=${TYPE///}  # linux_amd64_ -> linux_amd64_
          COMPILER=${{ matrix.compiler }}
          SSL=${{ matrix.ssl }}
          DEBIAN_ARCH=${{ matrix.debianArch }}
          TRIPLE_ARCH=${{ matrix.tripleArch }}
          TRIPLE_GNU=${{ matrix.tripleGnu }}
          NATIVE=${{ matrix.native }}
          DEBIAN_VERSION=${{ matrix.debianVersion }}

          REVISION=4.0.${{ github.run_number }}
          GH_MATRIX_OS=${{ matrix.os }}
          GH_MATRIX_TYPE=${{ matrix.type }}

          # Store variable for future use
          echo "HASH_VERSION=$HASH_VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TYPE=$TYPE" >> $GITHUB_ENV
          echo "SAFE_TYPE=$SAFE_TYPE" >> $GITHUB_ENV
          echo "COMPILER=$COMPILER" >> $GITHUB_ENV
          echo "SSL=$SSL" >> $GITHUB_ENV
          echo "DEBIAN_ARCH=$DEBIAN_ARCH" >> $GITHUB_ENV
          echo "TRIPLE_ARCH=$TRIPLE_ARCH" >> $GITHUB_ENV
          echo "TRIPLE_GNU=$TRIPLE_GNU" >> $GITHUB_ENV
          echo "NATIVE=$NATIVE" >> $GITHUB_ENV
          echo "DEBIAN_VERSION=$DEBIAN_VERSION" >> $GITHUB_ENV
          echo "REVISION=$REVISION" >> $GITHUB_ENV
          echo "GH_MATRIX_OS=$GH_MATRIX_OS" >> $GITHUB_ENV
          echo "GH_MATRIX_TYPE=$GH_MATRIX_TYPE" >> $GITHUB_ENV

          # Print debug info
          echo "hash version: $HASH_VERSION"
          echo "version: $VERSION"
          echo "safe arch: $SAFE_ARCH"
          echo "ssl: $SSL"
          echo "debian arch: $DEBIAN_ARCH"
          echo "triple arch: $TRIPLE_ARCH"
          echo "triple gnu: $TRIPLE_GNU"

          echo "Variables:"
          
          # Save env to file
          cat $GITHUB_ENV > github.env

      - name: Setup Java (Snapshot)
        if: github.ref == 'refs/heads/develop'
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: temurin
          server-id: mchv-snapshot-distribution
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          cache: 'maven'
      - name: Setup Java (Release)
        if: github.ref != 'refs/heads/develop'
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: temurin
          server-id: mchv-release-distribution
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          cache: 'maven'

      - name: Setup PHP with Readline extension
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          extensions: readline
#      - name: Install ubuntu 20.04 dependencies
#        if: matrix.os == 'ubuntu-20.04'
#        shell: bash
#        run: |
#          export DEBIAN_FRONTEND=noninteractive
#          sudo apt-get --assume-yes update
#          sudo apt-get --assume-yes install make git zlib1g-dev libssl-dev gperf php-cli cmake default-jdk clang-12 lld-12 libc++-12-dev libc++abi-12-dev libgcc-9-dev libunwind-dev libclang-common-12-dev maven
      - name: Install ubuntu 20.04 dependencies (cached)
        if: matrix.os == 'ubuntu-20.04'
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: make git zlib1g-dev libssl-dev gperf php-cli cmake default-jdk clang-12 lld-12 libc++-12-dev libc++abi-12-dev libgcc-9-dev libunwind-dev libclang-common-12-dev maven
          version: 1.0
#      - name: Install ubuntu 22.04 dependencies
#        if: matrix.os == 'ubuntu-22.04'
#        shell: bash
#        run: |
#          export DEBIAN_FRONTEND=noninteractive
#          sudo apt-get --assume-yes update
#          sudo apt-get --assume-yes install make git zlib1g-dev libssl-dev gperf php-cli cmake default-jdk clang-14 lld-14 libc++-14-dev libc++abi-14-dev libgcc-11-dev libunwind-14-dev libclang-common-14-dev maven
      - name: Install ubuntu 22.04 dependencies (cached)
        if: matrix.os == 'ubuntu-22.04'
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: make git zlib1g-dev libssl-dev gperf php-cli cmake default-jdk clang-14 lld-14 libc++-14-dev libc++abi-14-dev libgcc-11-dev libunwind-14-dev libclang-common-14-dev maven
          version: 1.0
      - name: Install custom dependencies
        if: startsWith(matrix.os, 'macos-') || startsWith(matrix.os, 'windows-')
        shell: bash
        run: |
          set -xeo pipefail
          echo "REVISION: $REVISION"

          if [[ -f "./.github/workflows/scripts/install_deps_${SAFE_TYPE}.sh" ]]; then
            if [[ "$GH_MATRIX_OS" == *"windows"* || "$GH_MATRIX_OS" == *"macos"* ]]; then
              ./.github/workflows/scripts/install_deps_${SAFE_TYPE}.sh
            else
              sudo ./.github/workflows/scripts/install_deps_${SAFE_TYPE}.sh
            fi
          fi
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9
      - name: Install MSVC
        if: matrix.os == 'windows-2022'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          toolset: 14.40
      - name: Setup cmake
        if: matrix.os == 'windows-2022'
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: 3.27.7
      - name: Set up Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.8.2
      - name: Setup NASM
        if: matrix.os == 'windows-2022'
        uses: ilammy/setup-nasm@v1
      - name: Restore artifacts, or setup vcpkg (do not install any package)
        if: matrix.os == 'windows-2022'
        uses: lukka/run-vcpkg@v11
        with:
          # Just install vcpkg for now, do not install any ports in this step yet.
          setupOnly: true
          # Location of the vcpkg submoduleworkspace in the Git repository.
          vcpkgDirectory: '${{ github.workspace }}/.vcpkg'
          vcpkgGitCommitId: '${{ matrix.vcpkgCommitId}}'
          # Use vcpkgArguments to perform the installation
          runVcpkgInstall: true
          vcpkgJsonGlob: '**/vcpkg.json'
        env:
          _vcpkg_binary_cache: ${{ github.workspace }}/.vcpkg-cache
          VCPKG_BINARY_SOURCES: clear;files,${{ github.workspace }}/.vcpkg-cache,readwrite
          VCPKG_BUILD_TYPE: release
          VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
          VCPKG_FEATURE_FLAGS: "ccache"

      - name: Upload vcpkg build logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: vcpkg-build-logs-${{ matrix.os }}-${{ matrix.triplet }}
          path: '${{ github.workspace }}/.vcpkg/buildtrees/gperf/*.log'
      - name: Save vcpkg Cache
        if: matrix.os == 'windows-2022' && steps.vcpkg-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ env._vcpkg_binary_cache }}
          key: vcpkg-${{ matrix.config.os }}-${{ matrix.config.type }}-${{ hashFiles('vcpkg.json') }}

      - name: Build
        if: startsWith(matrix.os, 'macos-') || startsWith(matrix.os, 'windows-')
        shell: bash
        run: |
          set -xeo pipefail
          echo "REVISION: $REVISION"

          source ./.github/workflows/scripts/build_${SAFE_TYPE}.sh
        env:
          SCCACHE_GHA_ENABLED: "true"
      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3
        if: matrix.os == 'ubuntu-22.04'
      - name: Expose GHA Cache Environment for Docker
        if: matrix.os == 'ubuntu-22.04'
        shell: bash
        run: |
          echo "--- Verifying native cache environment variables ---"
          if [ -z "$ACTIONS_RESULTS_URL" ]; then
            echo "ERROR: Native ACTIONS_RESULTS_URL is NOT set."
          else
            echo "SUCCESS: Native ACTIONS_RESULTS_URL is set."
          fi
          if [ -z "$ACTIONS_RUNTIME_TOKEN" ]; then
            echo "ERROR: Native ACTIONS_RUNTIME_TOKEN is NOT set."
          else
            echo "SUCCESS: Native ACTIONS_RUNTIME_TOKEN is set."
          fi
          echo "----------------------------------------------------"
          echo "ACTIONS_RESULTS_URL=${ACTIONS_RESULTS_URL}" >> $GITHUB_ENV
          echo "ACTIONS_RUNTIME_TOKEN=${ACTIONS_RUNTIME_TOKEN}" >> $GITHUB_ENV
      - name: Build
        uses: docker/build-push-action@v6
        if: matrix.os == 'ubuntu-22.04'
        with:
          context: .
          push: false
          file: tdlight.arch.${{env.SSL}}.${{env.COMPILER}}.dockerfile
          tags: tdlight.${{env.DEBIAN_ARCH}}.${{env.SSL}}.${{env.COMPILER}}:latest
          build-args: |
            SCCACHE_GHA_ENABLED=true
            ACTIONS_RESULTS_URL=${{env.ACTIONS_RESULTS_URL}}
            ACTIONS_RUNTIME_TOKEN=${{env.ACTIONS_RUNTIME_TOKEN}}
            ARCH_DEBIAN=${{env.DEBIAN_ARCH}}
            ARCH_TRIPLE=${{env.TRIPLE_ARCH}}
            TRIPLE_GNU=${{env.TRIPLE_GNU}}
            NATIVE=${{env.NATIVE}}
            DEBIAN_VERSION=${{env.DEBIAN_VERSION}}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=local,dest=./docker-out
      - name: Copy built files from docker
        if: matrix.os == 'ubuntu-22.04'
        shell: bash
        run: |
          set -xeo pipefail
          echo "REVISION: $REVISION"
          
          rm -rf natives
          mv ./docker-out/out/natives natives
          mv ./docker-out/out/libtdjni.so "libtdjni.${REVISION}-${TYPE}.so"
          mv ./docker-out/out/tdlight-natives.jar "natives/target-${TYPE}/tdlight-natives-${REVISION}-${TYPE}.jar"
      - uses: actions/upload-artifact@v4
        with:
          name: tdlight-natives-${{env.REVISION}}-${{env.TYPE}}.jar
          path: natives/target-${{env.TYPE}}/tdlight-natives-${{env.REVISION}}-${{env.TYPE}}.jar
      - name: Deploy to Maven (Snapshot)
        if: github.ref == 'refs/heads/develop'
        shell: bash
        run: |
          set -xeo pipefail
          echo "REVISION: $REVISION"
          echo "TYPE: $TYPE"
          
          mvn -B -f natives/pom.xml -Drevision="$REVISION" -Dnative.type.classifier="$TYPE" clean package
          mvn -B org.apache.maven.plugins:maven-deploy-plugin:3.1.1:deploy-file -Durl=https://mvn.mchv.eu/repository/mchv-snapshot \
                                                                            -DrepositoryId=mchv-snapshot-distribution \
                                                                            -Dfile=natives/target-$TYPE/tdlight-natives-$REVISION-$TYPE.jar \
                                                                            -Dpackaging=pom \
                                                                            -DgroupId=it.tdlight \
                                                                            -DartifactId=tdlight-natives \
                                                                            -Dversion=$REVISION \
                                                                            -Drevision=$REVISION \
                                                                            -Dclassifier=$TYPE \
                                                                            -Dnative.type.classifier="$TYPE"
          if [[ "$TYPE" == "linux_amd64_gnu_ssl1" ]]; then
            mvn -B org.apache.maven.plugins:maven-deploy-plugin:3.1.1:deploy-file -Durl=https://mvn.mchv.eu/repository/mchv-snapshot \
                                                                              -DrepositoryId=mchv-snapshot-distribution \
                                                                              -Dfile=natives/.ci-friendly-pom.xml \
                                                                              -Dpackaging=pom \
                                                                              -DgroupId=it.tdlight \
                                                                              -DartifactId=tdlight-natives \
                                                                              -Dversion=$REVISION \
                                                                              -Drevision=$REVISION \
                                                                              -Dnative.type.classifier="$TYPE"
          fi
          
          echo "Done."
          exit 0
        env:
          MAVEN_USERNAME: ${{ secrets.MCHV_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MCHV_TOKEN }}
      - name: Deploy to Maven (Release)
        if: github.ref == 'refs/heads/master'
        shell: bash
        run: |
          set -xeo pipefail
          echo "REVISION: $REVISION"
          echo "TYPE: $TYPE"
          
          mvn -B -f natives/pom.xml -Drevision="$REVISION" -Dnative.type.classifier="$TYPE" clean package
          mvn -B org.apache.maven.plugins:maven-deploy-plugin:3.1.1:deploy-file -Durl=https://mvn.mchv.eu/repository/mchv \
                                                                            -DrepositoryId=mchv-release-distribution \
                                                                            -Dfile=natives/target-$TYPE/tdlight-natives-$REVISION-$TYPE.jar \
                                                                            -Dpackaging=pom \
                                                                            -DgroupId=it.tdlight \
                                                                            -DartifactId=tdlight-natives \
                                                                            -Dversion=$REVISION \
                                                                            -Drevision=$REVISION \
                                                                            -Dclassifier=$TYPE \
                                                                            -Dnative.type.classifier="$TYPE"
          if [[ "$TYPE" == "linux_amd64_gnu_ssl1" ]]; then
            mvn -B org.apache.maven.plugins:maven-deploy-plugin:3.1.1:deploy-file -Durl=https://mvn.mchv.eu/repository/mchv \
                                                                              -DrepositoryId=mchv-release-distribution \
                                                                              -Dfile=natives/.ci-friendly-pom.xml \
                                                                              -Dpackaging=pom \
                                                                              -DgroupId=it.tdlight \
                                                                              -DartifactId=tdlight-natives \
                                                                              -Dversion=$REVISION \
                                                                              -Drevision=$REVISION \
                                                                              -Dnative.type.classifier="$TYPE"
          fi
          
          echo "Done."
          exit 0
        env:
          MAVEN_USERNAME: ${{ secrets.MCHV_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MCHV_TOKEN }}
